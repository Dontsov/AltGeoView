# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.7
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_hdfext', [dirname(__file__)])
        except ImportError:
            import _hdfext
            return _hdfext
        if fp is not None:
            try:
                _mod = imp.load_module('_hdfext', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _hdfext = swig_import_helper()
    del swig_import_helper
else:
    import _hdfext
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


DFNT_NONE = _hdfext.DFNT_NONE
DFNT_QUERY = _hdfext.DFNT_QUERY
DFNT_VERSION = _hdfext.DFNT_VERSION
DFNT_FLOAT32 = _hdfext.DFNT_FLOAT32
DFNT_FLOAT = _hdfext.DFNT_FLOAT
DFNT_FLOAT64 = _hdfext.DFNT_FLOAT64
DFNT_DOUBLE = _hdfext.DFNT_DOUBLE
DFNT_FLOAT128 = _hdfext.DFNT_FLOAT128
DFNT_INT8 = _hdfext.DFNT_INT8
DFNT_UINT8 = _hdfext.DFNT_UINT8
DFNT_INT16 = _hdfext.DFNT_INT16
DFNT_UINT16 = _hdfext.DFNT_UINT16
DFNT_INT32 = _hdfext.DFNT_INT32
DFNT_UINT32 = _hdfext.DFNT_UINT32
DFNT_INT64 = _hdfext.DFNT_INT64
DFNT_UINT64 = _hdfext.DFNT_UINT64
DFNT_INT128 = _hdfext.DFNT_INT128
DFNT_UINT128 = _hdfext.DFNT_UINT128
DFNT_UCHAR8 = _hdfext.DFNT_UCHAR8
DFNT_UCHAR = _hdfext.DFNT_UCHAR
DFNT_CHAR8 = _hdfext.DFNT_CHAR8
DFNT_CHAR = _hdfext.DFNT_CHAR
DFNT_CHAR16 = _hdfext.DFNT_CHAR16
DFNT_UCHAR16 = _hdfext.DFNT_UCHAR16
SD_UNLIMITED = _hdfext.SD_UNLIMITED
SD_FILL = _hdfext.SD_FILL
SD_NOFILL = _hdfext.SD_NOFILL
DFACC_READ = _hdfext.DFACC_READ
DFACC_WRITE = _hdfext.DFACC_WRITE
DFACC_CREATE = _hdfext.DFACC_CREATE
DFACC_ALL = _hdfext.DFACC_ALL
DFACC_RDONLY = _hdfext.DFACC_RDONLY
DFACC_RDWR = _hdfext.DFACC_RDWR
DFACC_CLOBBER = _hdfext.DFACC_CLOBBER
DFACC_BUFFER = _hdfext.DFACC_BUFFER
DFACC_APPENDABLE = _hdfext.DFACC_APPENDABLE
DFACC_CURRENT = _hdfext.DFACC_CURRENT
DFACC_OLD = _hdfext.DFACC_OLD
COMP_CODE_NONE = _hdfext.COMP_CODE_NONE
COMP_CODE_RLE = _hdfext.COMP_CODE_RLE
COMP_CODE_NBIT = _hdfext.COMP_CODE_NBIT
COMP_CODE_SKPHUFF = _hdfext.COMP_CODE_SKPHUFF
COMP_CODE_DEFLATE = _hdfext.COMP_CODE_DEFLATE
COMP_CODE_SZIP = _hdfext.COMP_CODE_SZIP
DFTAG_NDG = _hdfext.DFTAG_NDG
DFTAG_VH = _hdfext.DFTAG_VH
DFTAG_VG = _hdfext.DFTAG_VG
class array_byte(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, array_byte, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, array_byte, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _hdfext.new_array_byte(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _hdfext.delete_array_byte
    __del__ = lambda self : None;
    def __getitem__(self, *args): return _hdfext.array_byte___getitem__(self, *args)
    def __setitem__(self, *args): return _hdfext.array_byte___setitem__(self, *args)
    def cast(self): return _hdfext.array_byte_cast(self)
    __swig_getmethods__["frompointer"] = lambda x: _hdfext.array_byte_frompointer
    if _newclass:frompointer = staticmethod(_hdfext.array_byte_frompointer)
array_byte_swigregister = _hdfext.array_byte_swigregister
array_byte_swigregister(array_byte)

def array_byte_frompointer(*args):
  return _hdfext.array_byte_frompointer(*args)
array_byte_frompointer = _hdfext.array_byte_frompointer

class array_int8(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, array_int8, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, array_int8, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _hdfext.new_array_int8(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _hdfext.delete_array_int8
    __del__ = lambda self : None;
    def __getitem__(self, *args): return _hdfext.array_int8___getitem__(self, *args)
    def __setitem__(self, *args): return _hdfext.array_int8___setitem__(self, *args)
    def cast(self): return _hdfext.array_int8_cast(self)
    __swig_getmethods__["frompointer"] = lambda x: _hdfext.array_int8_frompointer
    if _newclass:frompointer = staticmethod(_hdfext.array_int8_frompointer)
array_int8_swigregister = _hdfext.array_int8_swigregister
array_int8_swigregister(array_int8)

def array_int8_frompointer(*args):
  return _hdfext.array_int8_frompointer(*args)
array_int8_frompointer = _hdfext.array_int8_frompointer

class array_int16(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, array_int16, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, array_int16, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _hdfext.new_array_int16(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _hdfext.delete_array_int16
    __del__ = lambda self : None;
    def __getitem__(self, *args): return _hdfext.array_int16___getitem__(self, *args)
    def __setitem__(self, *args): return _hdfext.array_int16___setitem__(self, *args)
    def cast(self): return _hdfext.array_int16_cast(self)
    __swig_getmethods__["frompointer"] = lambda x: _hdfext.array_int16_frompointer
    if _newclass:frompointer = staticmethod(_hdfext.array_int16_frompointer)
array_int16_swigregister = _hdfext.array_int16_swigregister
array_int16_swigregister(array_int16)

def array_int16_frompointer(*args):
  return _hdfext.array_int16_frompointer(*args)
array_int16_frompointer = _hdfext.array_int16_frompointer

class array_uint16(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, array_uint16, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, array_uint16, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _hdfext.new_array_uint16(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _hdfext.delete_array_uint16
    __del__ = lambda self : None;
    def __getitem__(self, *args): return _hdfext.array_uint16___getitem__(self, *args)
    def __setitem__(self, *args): return _hdfext.array_uint16___setitem__(self, *args)
    def cast(self): return _hdfext.array_uint16_cast(self)
    __swig_getmethods__["frompointer"] = lambda x: _hdfext.array_uint16_frompointer
    if _newclass:frompointer = staticmethod(_hdfext.array_uint16_frompointer)
array_uint16_swigregister = _hdfext.array_uint16_swigregister
array_uint16_swigregister(array_uint16)

def array_uint16_frompointer(*args):
  return _hdfext.array_uint16_frompointer(*args)
array_uint16_frompointer = _hdfext.array_uint16_frompointer

class array_int32(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, array_int32, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, array_int32, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _hdfext.new_array_int32(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _hdfext.delete_array_int32
    __del__ = lambda self : None;
    def __getitem__(self, *args): return _hdfext.array_int32___getitem__(self, *args)
    def __setitem__(self, *args): return _hdfext.array_int32___setitem__(self, *args)
    def cast(self): return _hdfext.array_int32_cast(self)
    __swig_getmethods__["frompointer"] = lambda x: _hdfext.array_int32_frompointer
    if _newclass:frompointer = staticmethod(_hdfext.array_int32_frompointer)
array_int32_swigregister = _hdfext.array_int32_swigregister
array_int32_swigregister(array_int32)

def array_int32_frompointer(*args):
  return _hdfext.array_int32_frompointer(*args)
array_int32_frompointer = _hdfext.array_int32_frompointer

class array_uint32(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, array_uint32, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, array_uint32, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _hdfext.new_array_uint32(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _hdfext.delete_array_uint32
    __del__ = lambda self : None;
    def __getitem__(self, *args): return _hdfext.array_uint32___getitem__(self, *args)
    def __setitem__(self, *args): return _hdfext.array_uint32___setitem__(self, *args)
    def cast(self): return _hdfext.array_uint32_cast(self)
    __swig_getmethods__["frompointer"] = lambda x: _hdfext.array_uint32_frompointer
    if _newclass:frompointer = staticmethod(_hdfext.array_uint32_frompointer)
array_uint32_swigregister = _hdfext.array_uint32_swigregister
array_uint32_swigregister(array_uint32)

def array_uint32_frompointer(*args):
  return _hdfext.array_uint32_frompointer(*args)
array_uint32_frompointer = _hdfext.array_uint32_frompointer

class array_float32(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, array_float32, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, array_float32, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _hdfext.new_array_float32(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _hdfext.delete_array_float32
    __del__ = lambda self : None;
    def __getitem__(self, *args): return _hdfext.array_float32___getitem__(self, *args)
    def __setitem__(self, *args): return _hdfext.array_float32___setitem__(self, *args)
    def cast(self): return _hdfext.array_float32_cast(self)
    __swig_getmethods__["frompointer"] = lambda x: _hdfext.array_float32_frompointer
    if _newclass:frompointer = staticmethod(_hdfext.array_float32_frompointer)
array_float32_swigregister = _hdfext.array_float32_swigregister
array_float32_swigregister(array_float32)

def array_float32_frompointer(*args):
  return _hdfext.array_float32_frompointer(*args)
array_float32_frompointer = _hdfext.array_float32_frompointer

class array_float64(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, array_float64, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, array_float64, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _hdfext.new_array_float64(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _hdfext.delete_array_float64
    __del__ = lambda self : None;
    def __getitem__(self, *args): return _hdfext.array_float64___getitem__(self, *args)
    def __setitem__(self, *args): return _hdfext.array_float64___setitem__(self, *args)
    def cast(self): return _hdfext.array_float64_cast(self)
    __swig_getmethods__["frompointer"] = lambda x: _hdfext.array_float64_frompointer
    if _newclass:frompointer = staticmethod(_hdfext.array_float64_frompointer)
array_float64_swigregister = _hdfext.array_float64_swigregister
array_float64_swigregister(array_float64)

def array_float64_frompointer(*args):
  return _hdfext.array_float64_frompointer(*args)
array_float64_frompointer = _hdfext.array_float64_frompointer


def new_array_voidp(*args):
  return _hdfext.new_array_voidp(*args)
new_array_voidp = _hdfext.new_array_voidp

def delete_array_voidp(*args):
  return _hdfext.delete_array_voidp(*args)
delete_array_voidp = _hdfext.delete_array_voidp

def array_voidp_getitem(*args):
  return _hdfext.array_voidp_getitem(*args)
array_voidp_getitem = _hdfext.array_voidp_getitem

def array_voidp_setitem(*args):
  return _hdfext.array_voidp_setitem(*args)
array_voidp_setitem = _hdfext.array_voidp_setitem

def Hopen(*args):
  return _hdfext.Hopen(*args)
Hopen = _hdfext.Hopen

def Hclose(*args):
  return _hdfext.Hclose(*args)
Hclose = _hdfext.Hclose

def Hgetlibversion():
  return _hdfext.Hgetlibversion()
Hgetlibversion = _hdfext.Hgetlibversion

def Hgetfileversion(*args):
  return _hdfext.Hgetfileversion(*args)
Hgetfileversion = _hdfext.Hgetfileversion

def Hishdf(*args):
  return _hdfext.Hishdf(*args)
Hishdf = _hdfext.Hishdf

def HEvalue(*args):
  return _hdfext.HEvalue(*args)
HEvalue = _hdfext.HEvalue

def HEstring(*args):
  return _hdfext.HEstring(*args)
HEstring = _hdfext.HEstring

def _HEprint():
  return _hdfext._HEprint()
_HEprint = _hdfext._HEprint

def _SDreaddata_0(*args):
  return _hdfext._SDreaddata_0(*args)
_SDreaddata_0 = _hdfext._SDreaddata_0

def _SDwritedata_0(*args):
  return _hdfext._SDwritedata_0(*args)
_SDwritedata_0 = _hdfext._SDwritedata_0

def SDstart(*args):
  return _hdfext.SDstart(*args)
SDstart = _hdfext.SDstart

def SDcreate(*args):
  return _hdfext.SDcreate(*args)
SDcreate = _hdfext.SDcreate

def SDselect(*args):
  return _hdfext.SDselect(*args)
SDselect = _hdfext.SDselect

def SDendaccess(*args):
  return _hdfext.SDendaccess(*args)
SDendaccess = _hdfext.SDendaccess

def SDend(*args):
  return _hdfext.SDend(*args)
SDend = _hdfext.SDend

def SDfileinfo(*args):
  return _hdfext.SDfileinfo(*args)
SDfileinfo = _hdfext.SDfileinfo

def SDgetinfo(*args):
  return _hdfext.SDgetinfo(*args)
SDgetinfo = _hdfext.SDgetinfo

def SDcheckempty(*args):
  return _hdfext.SDcheckempty(*args)
SDcheckempty = _hdfext.SDcheckempty

def SDidtoref(*args):
  return _hdfext.SDidtoref(*args)
SDidtoref = _hdfext.SDidtoref

def SDiscoordvar(*args):
  return _hdfext.SDiscoordvar(*args)
SDiscoordvar = _hdfext.SDiscoordvar

def SDisrecord(*args):
  return _hdfext.SDisrecord(*args)
SDisrecord = _hdfext.SDisrecord

def SDnametoindex(*args):
  return _hdfext.SDnametoindex(*args)
SDnametoindex = _hdfext.SDnametoindex

def SDreftoindex(*args):
  return _hdfext.SDreftoindex(*args)
SDreftoindex = _hdfext.SDreftoindex

def SDdiminfo(*args):
  return _hdfext.SDdiminfo(*args)
SDdiminfo = _hdfext.SDdiminfo

def SDgetdimid(*args):
  return _hdfext.SDgetdimid(*args)
SDgetdimid = _hdfext.SDgetdimid

def SDsetdimname(*args):
  return _hdfext.SDsetdimname(*args)
SDsetdimname = _hdfext.SDsetdimname

def SDgetdimscale(*args):
  return _hdfext.SDgetdimscale(*args)
SDgetdimscale = _hdfext.SDgetdimscale

def SDsetdimscale(*args):
  return _hdfext.SDsetdimscale(*args)
SDsetdimscale = _hdfext.SDsetdimscale

def SDattrinfo(*args):
  return _hdfext.SDattrinfo(*args)
SDattrinfo = _hdfext.SDattrinfo

def SDfindattr(*args):
  return _hdfext.SDfindattr(*args)
SDfindattr = _hdfext.SDfindattr

def SDreadattr(*args):
  return _hdfext.SDreadattr(*args)
SDreadattr = _hdfext.SDreadattr

def SDsetattr(*args):
  return _hdfext.SDsetattr(*args)
SDsetattr = _hdfext.SDsetattr

def SDgetcal(*args):
  return _hdfext.SDgetcal(*args)
SDgetcal = _hdfext.SDgetcal

def SDgetdatastrs(*args):
  return _hdfext.SDgetdatastrs(*args)
SDgetdatastrs = _hdfext.SDgetdatastrs

def SDgetdimstrs(*args):
  return _hdfext.SDgetdimstrs(*args)
SDgetdimstrs = _hdfext.SDgetdimstrs

def SDgetfillvalue(*args):
  return _hdfext.SDgetfillvalue(*args)
SDgetfillvalue = _hdfext.SDgetfillvalue

def SDgetrange(*args):
  return _hdfext.SDgetrange(*args)
SDgetrange = _hdfext.SDgetrange

def SDsetcal(*args):
  return _hdfext.SDsetcal(*args)
SDsetcal = _hdfext.SDsetcal

def SDsetdatastrs(*args):
  return _hdfext.SDsetdatastrs(*args)
SDsetdatastrs = _hdfext.SDsetdatastrs

def SDsetdimstrs(*args):
  return _hdfext.SDsetdimstrs(*args)
SDsetdimstrs = _hdfext.SDsetdimstrs

def SDsetfillmode(*args):
  return _hdfext.SDsetfillmode(*args)
SDsetfillmode = _hdfext.SDsetfillmode

def SDsetfillvalue(*args):
  return _hdfext.SDsetfillvalue(*args)
SDsetfillvalue = _hdfext.SDsetfillvalue

def SDsetrange(*args):
  return _hdfext.SDsetrange(*args)
SDsetrange = _hdfext.SDsetrange

def _SDgetcompress(*args):
  return _hdfext._SDgetcompress(*args)
_SDgetcompress = _hdfext._SDgetcompress

def _SDsetcompress(*args):
  return _hdfext._SDsetcompress(*args)
_SDsetcompress = _hdfext._SDsetcompress

def SDsetexternalfile(*args):
  return _hdfext.SDsetexternalfile(*args)
SDsetexternalfile = _hdfext.SDsetexternalfile

def Vinitialize(*args):
  return _hdfext.Vinitialize(*args)
Vinitialize = _hdfext.Vinitialize

def VSattach(*args):
  return _hdfext.VSattach(*args)
VSattach = _hdfext.VSattach

def VSdetach(*args):
  return _hdfext.VSdetach(*args)
VSdetach = _hdfext.VSdetach

def Vfinish(*args):
  return _hdfext.Vfinish(*args)
Vfinish = _hdfext.Vfinish

def VHstoredata(*args):
  return _hdfext.VHstoredata(*args)
VHstoredata = _hdfext.VHstoredata

def VHstoredatam(*args):
  return _hdfext.VHstoredatam(*args)
VHstoredatam = _hdfext.VHstoredatam

def VSfdefine(*args):
  return _hdfext.VSfdefine(*args)
VSfdefine = _hdfext.VSfdefine

def VSsetfields(*args):
  return _hdfext.VSsetfields(*args)
VSsetfields = _hdfext.VSsetfields

def VSseek(*args):
  return _hdfext.VSseek(*args)
VSseek = _hdfext.VSseek

def VSread(*args):
  return _hdfext.VSread(*args)
VSread = _hdfext.VSread

def VSwrite(*args):
  return _hdfext.VSwrite(*args)
VSwrite = _hdfext.VSwrite

def VSfpack(*args):
  return _hdfext.VSfpack(*args)
VSfpack = _hdfext.VSfpack

def VSelts(*args):
  return _hdfext.VSelts(*args)
VSelts = _hdfext.VSelts

def VSgetclass(*args):
  return _hdfext.VSgetclass(*args)
VSgetclass = _hdfext.VSgetclass

def VSgetfields(*args):
  return _hdfext.VSgetfields(*args)
VSgetfields = _hdfext.VSgetfields

def VSgetinterlace(*args):
  return _hdfext.VSgetinterlace(*args)
VSgetinterlace = _hdfext.VSgetinterlace

def VSgetname(*args):
  return _hdfext.VSgetname(*args)
VSgetname = _hdfext.VSgetname

def VSsizeof(*args):
  return _hdfext.VSsizeof(*args)
VSsizeof = _hdfext.VSsizeof

def VSinquire(*args):
  return _hdfext.VSinquire(*args)
VSinquire = _hdfext.VSinquire

def VSQuerytag(*args):
  return _hdfext.VSQuerytag(*args)
VSQuerytag = _hdfext.VSQuerytag

def VSQueryref(*args):
  return _hdfext.VSQueryref(*args)
VSQueryref = _hdfext.VSQueryref

def VSfindex(*args):
  return _hdfext.VSfindex(*args)
VSfindex = _hdfext.VSfindex

def VSisattr(*args):
  return _hdfext.VSisattr(*args)
VSisattr = _hdfext.VSisattr

def VFnfields(*args):
  return _hdfext.VFnfields(*args)
VFnfields = _hdfext.VFnfields

def VFfieldtype(*args):
  return _hdfext.VFfieldtype(*args)
VFfieldtype = _hdfext.VFfieldtype

def VFfieldname(*args):
  return _hdfext.VFfieldname(*args)
VFfieldname = _hdfext.VFfieldname

def VFfieldesize(*args):
  return _hdfext.VFfieldesize(*args)
VFfieldesize = _hdfext.VFfieldesize

def VFfieldisize(*args):
  return _hdfext.VFfieldisize(*args)
VFfieldisize = _hdfext.VFfieldisize

def VFfieldorder(*args):
  return _hdfext.VFfieldorder(*args)
VFfieldorder = _hdfext.VFfieldorder

def VSfind(*args):
  return _hdfext.VSfind(*args)
VSfind = _hdfext.VSfind

def VSgetid(*args):
  return _hdfext.VSgetid(*args)
VSgetid = _hdfext.VSgetid

def VSfexist(*args):
  return _hdfext.VSfexist(*args)
VSfexist = _hdfext.VSfexist

def VSsetclass(*args):
  return _hdfext.VSsetclass(*args)
VSsetclass = _hdfext.VSsetclass

def VSsetname(*args):
  return _hdfext.VSsetname(*args)
VSsetname = _hdfext.VSsetname

def VSsetinterlace(*args):
  return _hdfext.VSsetinterlace(*args)
VSsetinterlace = _hdfext.VSsetinterlace

def VSsetattr(*args):
  return _hdfext.VSsetattr(*args)
VSsetattr = _hdfext.VSsetattr

def VSgetattr(*args):
  return _hdfext.VSgetattr(*args)
VSgetattr = _hdfext.VSgetattr

def VSfnattrs(*args):
  return _hdfext.VSfnattrs(*args)
VSfnattrs = _hdfext.VSfnattrs

def VSnattrs(*args):
  return _hdfext.VSnattrs(*args)
VSnattrs = _hdfext.VSnattrs

def VSattrinfo(*args):
  return _hdfext.VSattrinfo(*args)
VSattrinfo = _hdfext.VSattrinfo

def VSfindattr(*args):
  return _hdfext.VSfindattr(*args)
VSfindattr = _hdfext.VSfindattr

def Vattach(*args):
  return _hdfext.Vattach(*args)
Vattach = _hdfext.Vattach

def Vdetach(*args):
  return _hdfext.Vdetach(*args)
Vdetach = _hdfext.Vdetach

def Vgetname(*args):
  return _hdfext.Vgetname(*args)
Vgetname = _hdfext.Vgetname

def Vsetname(*args):
  return _hdfext.Vsetname(*args)
Vsetname = _hdfext.Vsetname

def Vgetclass(*args):
  return _hdfext.Vgetclass(*args)
Vgetclass = _hdfext.Vgetclass

def Vsetclass(*args):
  return _hdfext.Vsetclass(*args)
Vsetclass = _hdfext.Vsetclass

def Vfind(*args):
  return _hdfext.Vfind(*args)
Vfind = _hdfext.Vfind

def Vfindclass(*args):
  return _hdfext.Vfindclass(*args)
Vfindclass = _hdfext.Vfindclass

def Vinsert(*args):
  return _hdfext.Vinsert(*args)
Vinsert = _hdfext.Vinsert

def Vaddtagref(*args):
  return _hdfext.Vaddtagref(*args)
Vaddtagref = _hdfext.Vaddtagref

def Vdeletetagref(*args):
  return _hdfext.Vdeletetagref(*args)
Vdeletetagref = _hdfext.Vdeletetagref

def Vdelete(*args):
  return _hdfext.Vdelete(*args)
Vdelete = _hdfext.Vdelete

def VQueryref(*args):
  return _hdfext.VQueryref(*args)
VQueryref = _hdfext.VQueryref

def VQuerytag(*args):
  return _hdfext.VQuerytag(*args)
VQuerytag = _hdfext.VQuerytag

def Vntagrefs(*args):
  return _hdfext.Vntagrefs(*args)
Vntagrefs = _hdfext.Vntagrefs

def Vgettagref(*args):
  return _hdfext.Vgettagref(*args)
Vgettagref = _hdfext.Vgettagref

def Vgetversion(*args):
  return _hdfext.Vgetversion(*args)
Vgetversion = _hdfext.Vgetversion

def Vgettagrefs(*args):
  return _hdfext.Vgettagrefs(*args)
Vgettagrefs = _hdfext.Vgettagrefs

def Vgetid(*args):
  return _hdfext.Vgetid(*args)
Vgetid = _hdfext.Vgetid

def Vinqtagref(*args):
  return _hdfext.Vinqtagref(*args)
Vinqtagref = _hdfext.Vinqtagref

def Visvg(*args):
  return _hdfext.Visvg(*args)
Visvg = _hdfext.Visvg

def Visvs(*args):
  return _hdfext.Visvs(*args)
Visvs = _hdfext.Visvs

def Vnrefs(*args):
  return _hdfext.Vnrefs(*args)
Vnrefs = _hdfext.Vnrefs

def Vfindattr(*args):
  return _hdfext.Vfindattr(*args)
Vfindattr = _hdfext.Vfindattr

def Vgetattr(*args):
  return _hdfext.Vgetattr(*args)
Vgetattr = _hdfext.Vgetattr

def Vsetattr(*args):
  return _hdfext.Vsetattr(*args)
Vsetattr = _hdfext.Vsetattr

def Vattrinfo(*args):
  return _hdfext.Vattrinfo(*args)
Vattrinfo = _hdfext.Vattrinfo

def Vnattrs(*args):
  return _hdfext.Vnattrs(*args)
Vnattrs = _hdfext.Vnattrs
# This file is compatible with both classic and new-style classes.


